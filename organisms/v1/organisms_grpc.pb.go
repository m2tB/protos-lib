// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: organisms/v1/organisms.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrganismsClient is the client API for Organisms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganismsClient interface {
	CreateOrganisms(ctx context.Context, in *CreateOrganismsRequest, opts ...grpc.CallOption) (*CreateOrganismsReply, error)
	UpdateOrganisms(ctx context.Context, in *UpdateOrganismsRequest, opts ...grpc.CallOption) (*UpdateOrganismsReply, error)
	UpdateOrganismsPassword(ctx context.Context, in *UpdateOrganismsPasswordRequest, opts ...grpc.CallOption) (*UpdateOrganismsPasswordReply, error)
	DeleteOrganisms(ctx context.Context, in *DeleteOrganismsRequest, opts ...grpc.CallOption) (*DeleteOrganismsReply, error)
	RecoveryOrganisms(ctx context.Context, in *RecoveryOrganismsRequest, opts ...grpc.CallOption) (*RecoveryOrganismsReply, error)
	ReadOrganisms(ctx context.Context, in *ReadOrganismsRequest, opts ...grpc.CallOption) (*ReadOrganismsReply, error)
	ListOrganisms(ctx context.Context, in *ListOrganismsRequest, opts ...grpc.CallOption) (*ListOrganismsReply, error)
	UpdateOrganismsInfo(ctx context.Context, in *UpdateOrganismsInfoRequest, opts ...grpc.CallOption) (*UpdateOrganismsInfoReply, error)
}

type organismsClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganismsClient(cc grpc.ClientConnInterface) OrganismsClient {
	return &organismsClient{cc}
}

func (c *organismsClient) CreateOrganisms(ctx context.Context, in *CreateOrganismsRequest, opts ...grpc.CallOption) (*CreateOrganismsReply, error) {
	out := new(CreateOrganismsReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/CreateOrganisms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) UpdateOrganisms(ctx context.Context, in *UpdateOrganismsRequest, opts ...grpc.CallOption) (*UpdateOrganismsReply, error) {
	out := new(UpdateOrganismsReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/UpdateOrganisms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) UpdateOrganismsPassword(ctx context.Context, in *UpdateOrganismsPasswordRequest, opts ...grpc.CallOption) (*UpdateOrganismsPasswordReply, error) {
	out := new(UpdateOrganismsPasswordReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/UpdateOrganismsPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) DeleteOrganisms(ctx context.Context, in *DeleteOrganismsRequest, opts ...grpc.CallOption) (*DeleteOrganismsReply, error) {
	out := new(DeleteOrganismsReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/DeleteOrganisms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) RecoveryOrganisms(ctx context.Context, in *RecoveryOrganismsRequest, opts ...grpc.CallOption) (*RecoveryOrganismsReply, error) {
	out := new(RecoveryOrganismsReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/RecoveryOrganisms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) ReadOrganisms(ctx context.Context, in *ReadOrganismsRequest, opts ...grpc.CallOption) (*ReadOrganismsReply, error) {
	out := new(ReadOrganismsReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/ReadOrganisms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) ListOrganisms(ctx context.Context, in *ListOrganismsRequest, opts ...grpc.CallOption) (*ListOrganismsReply, error) {
	out := new(ListOrganismsReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/ListOrganisms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organismsClient) UpdateOrganismsInfo(ctx context.Context, in *UpdateOrganismsInfoRequest, opts ...grpc.CallOption) (*UpdateOrganismsInfoReply, error) {
	out := new(UpdateOrganismsInfoReply)
	err := c.cc.Invoke(ctx, "/api.organisms.v1.Organisms/UpdateOrganismsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganismsServer is the server API for Organisms service.
// All implementations must embed UnimplementedOrganismsServer
// for forward compatibility
type OrganismsServer interface {
	CreateOrganisms(context.Context, *CreateOrganismsRequest) (*CreateOrganismsReply, error)
	UpdateOrganisms(context.Context, *UpdateOrganismsRequest) (*UpdateOrganismsReply, error)
	UpdateOrganismsPassword(context.Context, *UpdateOrganismsPasswordRequest) (*UpdateOrganismsPasswordReply, error)
	DeleteOrganisms(context.Context, *DeleteOrganismsRequest) (*DeleteOrganismsReply, error)
	RecoveryOrganisms(context.Context, *RecoveryOrganismsRequest) (*RecoveryOrganismsReply, error)
	ReadOrganisms(context.Context, *ReadOrganismsRequest) (*ReadOrganismsReply, error)
	ListOrganisms(context.Context, *ListOrganismsRequest) (*ListOrganismsReply, error)
	UpdateOrganismsInfo(context.Context, *UpdateOrganismsInfoRequest) (*UpdateOrganismsInfoReply, error)
	mustEmbedUnimplementedOrganismsServer()
}

// UnimplementedOrganismsServer must be embedded to have forward compatible implementations.
type UnimplementedOrganismsServer struct {
}

func (UnimplementedOrganismsServer) CreateOrganisms(context.Context, *CreateOrganismsRequest) (*CreateOrganismsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganisms not implemented")
}
func (UnimplementedOrganismsServer) UpdateOrganisms(context.Context, *UpdateOrganismsRequest) (*UpdateOrganismsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganisms not implemented")
}
func (UnimplementedOrganismsServer) UpdateOrganismsPassword(context.Context, *UpdateOrganismsPasswordRequest) (*UpdateOrganismsPasswordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganismsPassword not implemented")
}
func (UnimplementedOrganismsServer) DeleteOrganisms(context.Context, *DeleteOrganismsRequest) (*DeleteOrganismsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganisms not implemented")
}
func (UnimplementedOrganismsServer) RecoveryOrganisms(context.Context, *RecoveryOrganismsRequest) (*RecoveryOrganismsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoveryOrganisms not implemented")
}
func (UnimplementedOrganismsServer) ReadOrganisms(context.Context, *ReadOrganismsRequest) (*ReadOrganismsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrganisms not implemented")
}
func (UnimplementedOrganismsServer) ListOrganisms(context.Context, *ListOrganismsRequest) (*ListOrganismsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganisms not implemented")
}
func (UnimplementedOrganismsServer) UpdateOrganismsInfo(context.Context, *UpdateOrganismsInfoRequest) (*UpdateOrganismsInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganismsInfo not implemented")
}
func (UnimplementedOrganismsServer) mustEmbedUnimplementedOrganismsServer() {}

// UnsafeOrganismsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganismsServer will
// result in compilation errors.
type UnsafeOrganismsServer interface {
	mustEmbedUnimplementedOrganismsServer()
}

func RegisterOrganismsServer(s grpc.ServiceRegistrar, srv OrganismsServer) {
	s.RegisterService(&Organisms_ServiceDesc, srv)
}

func _Organisms_CreateOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganismsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).CreateOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/CreateOrganisms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).CreateOrganisms(ctx, req.(*CreateOrganismsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_UpdateOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganismsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).UpdateOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/UpdateOrganisms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).UpdateOrganisms(ctx, req.(*UpdateOrganismsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_UpdateOrganismsPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganismsPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).UpdateOrganismsPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/UpdateOrganismsPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).UpdateOrganismsPassword(ctx, req.(*UpdateOrganismsPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_DeleteOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganismsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).DeleteOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/DeleteOrganisms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).DeleteOrganisms(ctx, req.(*DeleteOrganismsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_RecoveryOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoveryOrganismsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).RecoveryOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/RecoveryOrganisms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).RecoveryOrganisms(ctx, req.(*RecoveryOrganismsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_ReadOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOrganismsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).ReadOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/ReadOrganisms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).ReadOrganisms(ctx, req.(*ReadOrganismsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_ListOrganisms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganismsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).ListOrganisms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/ListOrganisms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).ListOrganisms(ctx, req.(*ListOrganismsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Organisms_UpdateOrganismsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganismsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganismsServer).UpdateOrganismsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.organisms.v1.Organisms/UpdateOrganismsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganismsServer).UpdateOrganismsInfo(ctx, req.(*UpdateOrganismsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Organisms_ServiceDesc is the grpc.ServiceDesc for Organisms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Organisms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.organisms.v1.Organisms",
	HandlerType: (*OrganismsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganisms",
			Handler:    _Organisms_CreateOrganisms_Handler,
		},
		{
			MethodName: "UpdateOrganisms",
			Handler:    _Organisms_UpdateOrganisms_Handler,
		},
		{
			MethodName: "UpdateOrganismsPassword",
			Handler:    _Organisms_UpdateOrganismsPassword_Handler,
		},
		{
			MethodName: "DeleteOrganisms",
			Handler:    _Organisms_DeleteOrganisms_Handler,
		},
		{
			MethodName: "RecoveryOrganisms",
			Handler:    _Organisms_RecoveryOrganisms_Handler,
		},
		{
			MethodName: "ReadOrganisms",
			Handler:    _Organisms_ReadOrganisms_Handler,
		},
		{
			MethodName: "ListOrganisms",
			Handler:    _Organisms_ListOrganisms_Handler,
		},
		{
			MethodName: "UpdateOrganismsInfo",
			Handler:    _Organisms_UpdateOrganismsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "organisms/v1/organisms.proto",
}
