// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organisms/v1/organisms.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganismsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganismsRequestMultiError, or nil if none found.
func (m *CreateOrganismsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganismsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateOrganismsRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := CreateOrganismsRequestValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^1[3-9][0-9]{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateOrganismsRequest_NickName_Pattern.MatchString(m.GetNickName()) {
		err := CreateOrganismsRequestValidationError{
			field:  "NickName",
			reason: "value does not match regex pattern \"^[一-龥_a-zA-Z0-9]{2,24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 16 {
		err := CreateOrganismsRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSalt() != "" {

		if !_CreateOrganismsRequest_Salt_Pattern.MatchString(m.GetSalt()) {
			err := CreateOrganismsRequestValidationError{
				field:  "Salt",
				reason: "value does not match regex pattern \"^[a-zA-Z0-9]{8,16}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateOrganismsRequestMultiError(errors)
	}

	return nil
}

// CreateOrganismsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganismsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganismsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganismsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganismsRequestMultiError) AllErrors() []error { return m }

// CreateOrganismsRequestValidationError is the validation error returned by
// CreateOrganismsRequest.Validate if the designated constraints aren't met.
type CreateOrganismsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganismsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganismsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganismsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganismsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganismsRequestValidationError) ErrorName() string {
	return "CreateOrganismsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganismsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganismsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganismsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganismsRequestValidationError{}

var _CreateOrganismsRequest_Mobile_Pattern = regexp.MustCompile("^1[3-9][0-9]{9}$")

var _CreateOrganismsRequest_NickName_Pattern = regexp.MustCompile("^[一-龥_a-zA-Z0-9]{2,24}$")

var _CreateOrganismsRequest_Salt_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{8,16}$")

// Validate checks the field values on CreateOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganismsReplyMultiError, or nil if none found.
func (m *CreateOrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if len(errors) > 0 {
		return CreateOrganismsReplyMultiError(errors)
	}

	return nil
}

// CreateOrganismsReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOrganismsReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganismsReplyMultiError) AllErrors() []error { return m }

// CreateOrganismsReplyValidationError is the validation error returned by
// CreateOrganismsReply.Validate if the designated constraints aren't met.
type CreateOrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganismsReplyValidationError) ErrorName() string {
	return "CreateOrganismsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganismsReplyValidationError{}

// Validate checks the field values on UpdateOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganismsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganismsRequestMultiError, or nil if none found.
func (m *UpdateOrganismsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganismsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrganismsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMobile() != "" {

		if !_UpdateOrganismsRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
			err := UpdateOrganismsRequestValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetNickName() != "" {

		if !_UpdateOrganismsRequest_NickName_Pattern.MatchString(m.GetNickName()) {
			err := UpdateOrganismsRequestValidationError{
				field:  "NickName",
				reason: "value does not match regex pattern \"^[一-龥_a-zA-Z0-9]{2,24}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateOrganismsRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganismsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganismsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganismsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganismsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganismsRequestMultiError) AllErrors() []error { return m }

// UpdateOrganismsRequestValidationError is the validation error returned by
// UpdateOrganismsRequest.Validate if the designated constraints aren't met.
type UpdateOrganismsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganismsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganismsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganismsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganismsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganismsRequestValidationError) ErrorName() string {
	return "UpdateOrganismsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganismsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganismsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganismsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganismsRequestValidationError{}

var _UpdateOrganismsRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

var _UpdateOrganismsRequest_NickName_Pattern = regexp.MustCompile("^[一-龥_a-zA-Z0-9]{2,24}$")

// Validate checks the field values on UpdateOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganismsReplyMultiError, or nil if none found.
func (m *UpdateOrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if len(errors) > 0 {
		return UpdateOrganismsReplyMultiError(errors)
	}

	return nil
}

// UpdateOrganismsReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganismsReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganismsReplyMultiError) AllErrors() []error { return m }

// UpdateOrganismsReplyValidationError is the validation error returned by
// UpdateOrganismsReply.Validate if the designated constraints aren't met.
type UpdateOrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganismsReplyValidationError) ErrorName() string {
	return "UpdateOrganismsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganismsReplyValidationError{}

// Validate checks the field values on UpdateOrganismsPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganismsPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganismsPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganismsPasswordRequestMultiError, or nil if none found.
func (m *UpdateOrganismsPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganismsPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrganismsPasswordRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOPassword()); l < 8 || l > 16 {
		err := UpdateOrganismsPasswordRequestValidationError{
			field:  "OPassword",
			reason: "value length must be between 8 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNPassword()); l < 8 || l > 16 {
		err := UpdateOrganismsPasswordRequestValidationError{
			field:  "NPassword",
			reason: "value length must be between 8 and 16 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateOrganismsPasswordRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganismsPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganismsPasswordRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganismsPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganismsPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganismsPasswordRequestMultiError) AllErrors() []error { return m }

// UpdateOrganismsPasswordRequestValidationError is the validation error
// returned by UpdateOrganismsPasswordRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganismsPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganismsPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganismsPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganismsPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganismsPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganismsPasswordRequestValidationError) ErrorName() string {
	return "UpdateOrganismsPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganismsPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganismsPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganismsPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganismsPasswordRequestValidationError{}

// Validate checks the field values on UpdateOrganismsPasswordReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganismsPasswordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganismsPasswordReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganismsPasswordReplyMultiError, or nil if none found.
func (m *UpdateOrganismsPasswordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganismsPasswordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if len(errors) > 0 {
		return UpdateOrganismsPasswordReplyMultiError(errors)
	}

	return nil
}

// UpdateOrganismsPasswordReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganismsPasswordReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganismsPasswordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganismsPasswordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganismsPasswordReplyMultiError) AllErrors() []error { return m }

// UpdateOrganismsPasswordReplyValidationError is the validation error returned
// by UpdateOrganismsPasswordReply.Validate if the designated constraints
// aren't met.
type UpdateOrganismsPasswordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganismsPasswordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganismsPasswordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganismsPasswordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganismsPasswordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganismsPasswordReplyValidationError) ErrorName() string {
	return "UpdateOrganismsPasswordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganismsPasswordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganismsPasswordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganismsPasswordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganismsPasswordReplyValidationError{}

// Validate checks the field values on DeleteOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganismsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganismsRequestMultiError, or nil if none found.
func (m *DeleteOrganismsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganismsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOrganismsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrganismsRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganismsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganismsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganismsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganismsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganismsRequestMultiError) AllErrors() []error { return m }

// DeleteOrganismsRequestValidationError is the validation error returned by
// DeleteOrganismsRequest.Validate if the designated constraints aren't met.
type DeleteOrganismsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganismsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganismsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganismsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganismsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganismsRequestValidationError) ErrorName() string {
	return "DeleteOrganismsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganismsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganismsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganismsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganismsRequestValidationError{}

// Validate checks the field values on DeleteOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganismsReplyMultiError, or nil if none found.
func (m *DeleteOrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if len(errors) > 0 {
		return DeleteOrganismsReplyMultiError(errors)
	}

	return nil
}

// DeleteOrganismsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganismsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganismsReplyMultiError) AllErrors() []error { return m }

// DeleteOrganismsReplyValidationError is the validation error returned by
// DeleteOrganismsReply.Validate if the designated constraints aren't met.
type DeleteOrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganismsReplyValidationError) ErrorName() string {
	return "DeleteOrganismsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganismsReplyValidationError{}

// Validate checks the field values on RecoveryOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoveryOrganismsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoveryOrganismsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoveryOrganismsRequestMultiError, or nil if none found.
func (m *RecoveryOrganismsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoveryOrganismsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RecoveryOrganismsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecoveryOrganismsRequestMultiError(errors)
	}

	return nil
}

// RecoveryOrganismsRequestMultiError is an error wrapping multiple validation
// errors returned by RecoveryOrganismsRequest.ValidateAll() if the designated
// constraints aren't met.
type RecoveryOrganismsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoveryOrganismsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoveryOrganismsRequestMultiError) AllErrors() []error { return m }

// RecoveryOrganismsRequestValidationError is the validation error returned by
// RecoveryOrganismsRequest.Validate if the designated constraints aren't met.
type RecoveryOrganismsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoveryOrganismsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoveryOrganismsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoveryOrganismsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoveryOrganismsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoveryOrganismsRequestValidationError) ErrorName() string {
	return "RecoveryOrganismsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecoveryOrganismsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoveryOrganismsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoveryOrganismsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoveryOrganismsRequestValidationError{}

// Validate checks the field values on RecoveryOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoveryOrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoveryOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoveryOrganismsReplyMultiError, or nil if none found.
func (m *RecoveryOrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoveryOrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if len(errors) > 0 {
		return RecoveryOrganismsReplyMultiError(errors)
	}

	return nil
}

// RecoveryOrganismsReplyMultiError is an error wrapping multiple validation
// errors returned by RecoveryOrganismsReply.ValidateAll() if the designated
// constraints aren't met.
type RecoveryOrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoveryOrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoveryOrganismsReplyMultiError) AllErrors() []error { return m }

// RecoveryOrganismsReplyValidationError is the validation error returned by
// RecoveryOrganismsReply.Validate if the designated constraints aren't met.
type RecoveryOrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoveryOrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoveryOrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoveryOrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoveryOrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoveryOrganismsReplyValidationError) ErrorName() string {
	return "RecoveryOrganismsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RecoveryOrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoveryOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoveryOrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoveryOrganismsReplyValidationError{}

// Validate checks the field values on ReadOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrganismsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrganismsRequestMultiError, or nil if none found.
func (m *ReadOrganismsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrganismsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ReadOrganismsRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadOrganismsRequestMultiError(errors)
	}

	return nil
}

// ReadOrganismsRequestMultiError is an error wrapping multiple validation
// errors returned by ReadOrganismsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadOrganismsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrganismsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrganismsRequestMultiError) AllErrors() []error { return m }

// ReadOrganismsRequestValidationError is the validation error returned by
// ReadOrganismsRequest.Validate if the designated constraints aren't met.
type ReadOrganismsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrganismsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrganismsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrganismsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrganismsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrganismsRequestValidationError) ErrorName() string {
	return "ReadOrganismsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrganismsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrganismsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrganismsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrganismsRequestValidationError{}

// Validate checks the field values on ReadOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOrganismsReplyMultiError, or nil if none found.
func (m *ReadOrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if all {
		switch v := interface{}(m.GetOrganisms()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadOrganismsReplyValidationError{
					field:  "Organisms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadOrganismsReplyValidationError{
					field:  "Organisms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganisms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadOrganismsReplyValidationError{
				field:  "Organisms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadOrganismsReplyMultiError(errors)
	}

	return nil
}

// ReadOrganismsReplyMultiError is an error wrapping multiple validation errors
// returned by ReadOrganismsReply.ValidateAll() if the designated constraints
// aren't met.
type ReadOrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOrganismsReplyMultiError) AllErrors() []error { return m }

// ReadOrganismsReplyValidationError is the validation error returned by
// ReadOrganismsReply.Validate if the designated constraints aren't met.
type ReadOrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOrganismsReplyValidationError) ErrorName() string {
	return "ReadOrganismsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOrganismsReplyValidationError{}

// Validate checks the field values on ListOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganismsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganismsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganismsRequestMultiError, or nil if none found.
func (m *ListOrganismsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganismsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPn() != 0 {

		if m.GetPn() < 1 {
			err := ListOrganismsRequestValidationError{
				field:  "Pn",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPSize() != 0 {

		if m.GetPSize() < 10 {
			err := ListOrganismsRequestValidationError{
				field:  "PSize",
				reason: "value must be greater than or equal to 10",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetMobile() != "" {

		if !_ListOrganismsRequest_Mobile_Pattern.MatchString(m.GetMobile()) {
			err := ListOrganismsRequestValidationError{
				field:  "Mobile",
				reason: "value does not match regex pattern \"^0?(13|14|15|17|18|19)[0-9]{9}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetNickName() != "" {

		if !_ListOrganismsRequest_NickName_Pattern.MatchString(m.GetNickName()) {
			err := ListOrganismsRequestValidationError{
				field:  "NickName",
				reason: "value does not match regex pattern \"^[一-龥_a-zA-Z0-9]{2,24}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetIsDeleted() != 0 {

		if _, ok := _ListOrganismsRequest_IsDeleted_InLookup[m.GetIsDeleted()]; !ok {
			err := ListOrganismsRequestValidationError{
				field:  "IsDeleted",
				reason: "value must be in list [0 1]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListOrganismsRequestMultiError(errors)
	}

	return nil
}

// ListOrganismsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganismsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganismsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganismsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganismsRequestMultiError) AllErrors() []error { return m }

// ListOrganismsRequestValidationError is the validation error returned by
// ListOrganismsRequest.Validate if the designated constraints aren't met.
type ListOrganismsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganismsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganismsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganismsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganismsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganismsRequestValidationError) ErrorName() string {
	return "ListOrganismsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganismsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganismsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganismsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganismsRequestValidationError{}

var _ListOrganismsRequest_Mobile_Pattern = regexp.MustCompile("^0?(13|14|15|17|18|19)[0-9]{9}$")

var _ListOrganismsRequest_NickName_Pattern = regexp.MustCompile("^[一-龥_a-zA-Z0-9]{2,24}$")

var _ListOrganismsRequest_IsDeleted_InLookup = map[int32]struct{}{
	0: {},
	1: {},
}

// Validate checks the field values on ListOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganismsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganismsReplyMultiError, or nil if none found.
func (m *ListOrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganismsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganismsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganismsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganismsReplyMultiError(errors)
	}

	return nil
}

// ListOrganismsReplyMultiError is an error wrapping multiple validation errors
// returned by ListOrganismsReply.ValidateAll() if the designated constraints
// aren't met.
type ListOrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganismsReplyMultiError) AllErrors() []error { return m }

// ListOrganismsReplyValidationError is the validation error returned by
// ListOrganismsReply.Validate if the designated constraints aren't met.
type ListOrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganismsReplyValidationError) ErrorName() string {
	return "ListOrganismsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganismsReplyValidationError{}

// Validate checks the field values on OrganismsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrganismsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganismsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganismsReplyMultiError,
// or nil if none found.
func (m *OrganismsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganismsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for NickName

	// no validation rules for CreatedAt

	// no validation rules for CreatedBy

	// no validation rules for UpdatedAt

	// no validation rules for UpdatedBy

	// no validation rules for IsDeleted

	if all {
		switch v := interface{}(m.GetOrganismsInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganismsReplyValidationError{
					field:  "OrganismsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganismsReplyValidationError{
					field:  "OrganismsInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganismsInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganismsReplyValidationError{
				field:  "OrganismsInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganismsReplyMultiError(errors)
	}

	return nil
}

// OrganismsReplyMultiError is an error wrapping multiple validation errors
// returned by OrganismsReply.ValidateAll() if the designated constraints
// aren't met.
type OrganismsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganismsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganismsReplyMultiError) AllErrors() []error { return m }

// OrganismsReplyValidationError is the validation error returned by
// OrganismsReply.Validate if the designated constraints aren't met.
type OrganismsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganismsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganismsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganismsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganismsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganismsReplyValidationError) ErrorName() string { return "OrganismsReplyValidationError" }

// Error satisfies the builtin error interface
func (e OrganismsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganismsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganismsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganismsReplyValidationError{}

// Validate checks the field values on OrganismsInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganismsInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganismsInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganismsInfoReplyMultiError, or nil if none found.
func (m *OrganismsInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganismsInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for RealName

	// no validation rules for Email

	// no validation rules for IdCard

	// no validation rules for HomeAddress

	// no validation rules for CreatedAt

	// no validation rules for CreatedBy

	// no validation rules for UpdatedAt

	// no validation rules for UpdatedBy

	if len(errors) > 0 {
		return OrganismsInfoReplyMultiError(errors)
	}

	return nil
}

// OrganismsInfoReplyMultiError is an error wrapping multiple validation errors
// returned by OrganismsInfoReply.ValidateAll() if the designated constraints
// aren't met.
type OrganismsInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganismsInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganismsInfoReplyMultiError) AllErrors() []error { return m }

// OrganismsInfoReplyValidationError is the validation error returned by
// OrganismsInfoReply.Validate if the designated constraints aren't met.
type OrganismsInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganismsInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganismsInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganismsInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganismsInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganismsInfoReplyValidationError) ErrorName() string {
	return "OrganismsInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OrganismsInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganismsInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganismsInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganismsInfoReplyValidationError{}

// Validate checks the field values on UpdateOrganismsInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganismsInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganismsInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganismsInfoRequestMultiError, or nil if none found.
func (m *UpdateOrganismsInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganismsInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOrganismsInfoRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRealName() != "" {

		if !_UpdateOrganismsInfoRequest_RealName_Pattern.MatchString(m.GetRealName()) {
			err := UpdateOrganismsInfoRequestValidationError{
				field:  "RealName",
				reason: "value does not match regex pattern \"^[一-龥_a-zA-Z0-9]{2,24}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetEmail() != "" {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = UpdateOrganismsInfoRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetIdCard() != "" {

		if !_UpdateOrganismsInfoRequest_IdCard_Pattern.MatchString(m.GetIdCard()) {
			err := UpdateOrganismsInfoRequestValidationError{
				field:  "IdCard",
				reason: "value does not match regex pattern \"^[1-9][0-9]{5}(18|19|([23][0-9]))[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{3}[0-9Xx]$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetHomeAddress() != "" {

		if !_UpdateOrganismsInfoRequest_HomeAddress_Pattern.MatchString(m.GetHomeAddress()) {
			err := UpdateOrganismsInfoRequestValidationError{
				field:  "HomeAddress",
				reason: "value does not match regex pattern \"^[一-龥_a-zA-Z0-9]{2,128}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateOrganismsInfoRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateOrganismsInfoRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateOrganismsInfoRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateOrganismsInfoRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganismsInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganismsInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganismsInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganismsInfoRequestMultiError) AllErrors() []error { return m }

// UpdateOrganismsInfoRequestValidationError is the validation error returned
// by UpdateOrganismsInfoRequest.Validate if the designated constraints aren't met.
type UpdateOrganismsInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganismsInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganismsInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganismsInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganismsInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganismsInfoRequestValidationError) ErrorName() string {
	return "UpdateOrganismsInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganismsInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganismsInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganismsInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganismsInfoRequestValidationError{}

var _UpdateOrganismsInfoRequest_RealName_Pattern = regexp.MustCompile("^[一-龥_a-zA-Z0-9]{2,24}$")

var _UpdateOrganismsInfoRequest_IdCard_Pattern = regexp.MustCompile("^[1-9][0-9]{5}(18|19|([23][0-9]))[0-9]{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]{3}[0-9Xx]$")

var _UpdateOrganismsInfoRequest_HomeAddress_Pattern = regexp.MustCompile("^[一-龥_a-zA-Z0-9]{2,128}$")

// Validate checks the field values on UpdateOrganismsInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganismsInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganismsInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganismsInfoReplyMultiError, or nil if none found.
func (m *UpdateOrganismsInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganismsInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exec

	// no validation rules for Explain

	if len(errors) > 0 {
		return UpdateOrganismsInfoReplyMultiError(errors)
	}

	return nil
}

// UpdateOrganismsInfoReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganismsInfoReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganismsInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganismsInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganismsInfoReplyMultiError) AllErrors() []error { return m }

// UpdateOrganismsInfoReplyValidationError is the validation error returned by
// UpdateOrganismsInfoReply.Validate if the designated constraints aren't met.
type UpdateOrganismsInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganismsInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganismsInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganismsInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganismsInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganismsInfoReplyValidationError) ErrorName() string {
	return "UpdateOrganismsInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganismsInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganismsInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganismsInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganismsInfoReplyValidationError{}
